## START: Static Group Authorization. **
#set( $userGroups = $ctx.identity.claims.get("cognito:groups") )
#set( $allowedGroups = ["Managers"] )
#set($isAuthorized = $util.defaultIfNull($isAuthorized, false))
#foreach( $userGroup in $userGroups )
  #foreach( $allowedGroup in $allowedGroups )
    #if( $allowedGroup == $userGroup )
      #set( $isAuthorized = true )
    #end
  #end
#end
## END: Static Group Authorization. **

## START: Throw if Unauthorized. **
#if( !$isAuthorized )
$util.unauthorized()
#end
## END: Throw if Unauthorized. **

## START: Static Group Authorization. **
#set( $userGroups = $ctx.identity.claims.get("cognito:groups") )
#set( $allowedGroups = ["Employees"] )
#set($isAuthorized = $util.defaultIfNull($isAuthorized, false))
#foreach( $userGroup in $userGroups )
  #foreach( $allowedGroup in $allowedGroups )
    #if( $allowedGroup == $userGroup )
      #set( $isAuthorized = true )
    #end
  #end
#end
## END: Static Group Authorization. **

## START: Throw if Unauthorized. **
#if( !$isAuthorized )
$util.unauthorized()
#end
## END: Throw if Unauthorized. **

## START: Prepare DynamoDB PutItem Request. **
$util.qr($context.args.input.put("createdAt", $util.time.nowISO8601()))
$util.qr($context.args.input.put("updatedAt", $util.time.nowISO8601()))
$util.qr($context.args.input.put("__typename", "Workout"))
{
  "version": "2017-02-28",
  "operation": "PutItem",
  "key": {
      "id": {
          "S": "$util.autoId()"
    }
  },
  "attributeValues": $util.dynamodb.toMapValuesJson($context.args.input),
  "condition": {
      "expression": "attribute_not_exists(#id)",
      "expressionNames": {
          "#id": "id"
    }
  }
}
## END: Prepare DynamoDB PutItem Request. **